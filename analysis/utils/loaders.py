import pandas as pd
import numpy as np
import json

from .constants import *

#
# Functions that support loading data.
#

def get_crowdgrader_json(file_name):
    """
    Loads the JSON file that you download from the CrowdGrader website.
    Needed before you can apply functions from crowdgrader.py
    """
    # Load the JSON file.
    with open(file_name, 'r') as f:
        data = json.load(f)
    # Place the contents into a DataFrame.
    return pd.DataFrame(data['Submission list'])

def get_crowdgrader_essay(file_name):
    """
    Loads a single essay assignment spreadsheet (generated by us from Crowdgrader data) into a Pandas dataframe.
    """
    cols = ['User email', 'Submission date', 'Grades', 'Reviews Num']
    df = pd.read_excel(file_name)[cols]

    # Instead of a list of grades, get a single average grade.
    df['Grades'] = df['Grades'].dropna().apply(lambda x: x.replace('[','').replace(']','').split(', '))
    df['Grade'] = df['Grades'].dropna().apply(lambda xs: np.mean(sorted([float(x) for x in xs if x != 'None'], reverse=True)[0:3])).astype(float)
    df = df.drop(columns=['Grades'])

    # Rename email column for consistency.
    df = df.rename(columns={'User email': 'Email Address'})
    return df

def get_google_essay(file_name):
    """
    Loads a single essay assignment from a Google form spreadsheet into a Pandas dataframe.
    """
    cols = ['Timestamp', 'Email Address']
    df = pd.read_excel(file_name)[cols].rename(columns={'Timestamp': 'Submission date'})

    # In this case, just set the grade and reviews to default values make compatible with CrowdGrader peer reviews.
    df['Grade'] = 2
    df['Reviews Num'] = 0

    # Rename email column for consistency.
    df = df.rename(columns={'User email': 'Email Address'})
    return df

def get_essays(crowdgrader_files=[(ESSAY_1_FILE, 1), (ESSAY_2_FILE, 2)], google_files=[(ESSAY_3_FILE, 3)]):
    """
    Loads all of the essay assignments into separate "sheets" (similar to assignments and surveys).
    """
    sheets = {}

    # The tuples in the list point to the filename and assignment number (e.g., Essay 1...)
    for (essay_file, essay_num) in crowdgrader_files:
        df = get_crowdgrader_essay(essay_file)
        essay_key = 'Essay {}'.format(essay_num)
        sheets[essay_key] = df

    # Same but for essays submitted with Google form.
    for (essay_file, essay_num) in google_files:
        df = get_google_essay(essay_file)
        essay_key = 'Essay {}'.format(essay_num)
        sheets[essay_key] = df

    return sheets

def get_makeup_essay(file_name):
    """
    Loads a single makeup essay assignment from a Google form spreadsheet into a Pandas dataframe.
    """
    cols = ['Email', 'Reviewed?']
    essay_sheets = pd.read_excel(file_name, sheet_name=None)

    df_1 = essay_sheets['CrowdGrader'][cols]
    df_2 = essay_sheets['DSP'][cols]
    df = pd.concat([df_1, df_2]).dropna()

    # Rename email column for consistency.
    df = df.rename(columns={'Email': 'Email Address'})
    return df

def get_makeup_essays(files=[(ESSAY_1_DSP_FILE, 1), (ESSAY_2_DSP_FILE, 2)]):
    """
    Loads all of the makeup essay assignments into separate "sheets" (similar to assignments and surveys).
    """
    sheets = {}

    # The tuples in the list point to the filename and assignment number (e.g., Essay 1...)
    for (essay_file, essay_num) in files:
        df = get_makeup_essay(essay_file)
        essay_key = 'Essay {}'.format(essay_num)
        sheets[essay_key] = df

    return sheets

def get_roster(file_name=ROSTER_FILE):
    """
    Load the roster file. Commented out code shows how to combine multiple roster files if necessary (e.g., H195 and 195).
    """
    # Uncomment if you have multiple files that you need to combine data from.
    # dfs = []
    # for roster_file in [ROSTER_FILE, ROSTER_H195_FILE]:
    #     df = pd.read_csv(roster_file)[['Name', 'Student ID', 'Email Address']]
    #     dfs.append(df)
    #
    # # Create a single dataframe.
    # roster_df = pd.concat(dfs)

    # Comment this out if you have multiple files that you need to combine data from. (See above.)
    roster_df = pd.read_csv(file_name)[['Name', 'Student ID', 'Email Address']]

    # Rename student ID column for consistency.
    roster_df = roster_df.rename(columns={'Student ID': 'SID'})
    return roster_df

def get_attendances(file_name=ATTENDANCE_FILE):
    "Load the attendance spreadsheet into a dict of Pandas dataframes."
    return pd.read_excel(file_name, sheet_name=None)

def get_surveys(file_name=SURVEY_FILE):
    "Load the pre-lecture spreadsheet into a dict of Pandas dataframes."
    return pd.read_excel(file_name, sheet_name=None)

def get_makeups(file_name=MAKEUP_FILE):
    "Load the makeup assignment spreadsheet into a dict of Pandas dataframes."
    return pd.read_excel(file_name, sheet_name=None)

def get_zoom_logs(date, files=ZOOM_FILES, min_duration=MIN_ZOOM_DURATION, timestamp_col='Leave Time', verbose=False):
    date = date.replace('/', '_')
    zoom_files = [f for f in files if date in f]

    if len(zoom_files) == 0:
        print('WARN! Zoom files are not available for {}.'.format(date))
        return None

    df = None
    for zoom_file in zoom_files:
        # Remove any headers, if necessary.
        with open(zoom_file, 'r') as f:
            data = f.readlines()
        skip_lines = 2 if 'Meeting ID' in data[0] else 0
        current_df = pd.read_csv(zoom_file, skiprows=skip_lines)
        df = current_df if df is None else pd.concat([df, current_df])

    # Map emails to SIDs and remove unresolved (make sure to check manually!).
    df['SID'] = df['User Email'].apply(lambda x: email_to_sid(x, verbose=verbose)).astype(int)
    df = df[df['SID'] != -1]

    # Users might exit and join so sum their durations.
    df = df.rename(columns={'Duration (Minutes)': 'Duration'})
    attendees_df = df[['SID', 'Duration']].groupby('SID').sum().reset_index()

    # Use first value from "timestamp_col" as timestamp.
    df = df.drop_duplicates(subset='SID').rename(columns={timestamp_col: 'Timestamp'})
    attendees_df = attendees_df.merge(df[['SID', 'Timestamp']], how='left', on='SID')

    # Return only students who stayed for a total of MIN_ZOOM_DURATION minutes.
    return attendees_df[attendees_df['Duration'] >= MIN_ZOOM_DURATION]

#
# Functions to help with Email to SID mapping for the loaders.
#

def get_email_to_sids():
    "Helper function that generates the emails to SIDs dictionary."

    roster_df = get_roster()
    sheets = get_attendances() | get_surveys() # add other sheets as needed.

    # Get a list of SIDs and emails from the roster.
    SIDs = roster_df['SID'].tolist()

    # Start with a dictionary of emails from the roster.
    email_to_sids = {k:v for k,v in zip(roster_df['Email Address'], roster_df['SID'])}

    # Some students might have another email that they use for google forms.
    # For this reason, we add those emails from forms to the existing dictionary.
    for current_df in sheets.values():
        # If SID or email is not present, skip the sheet.
        if 'SID' not in current_df or 'Email Address' not in current_df:
            continue

        # Focus only on students whose SID is present in the roster but email is not.
        students_df = current_df[current_df['SID'].isin(SIDs) & (~current_df['Email Address'].isin(email_to_sids))]

        # Add emails absent from the dictionary.
        for idx, row in students_df.iterrows():
            email, sid = row['Email Address'], row['SID']
            email_to_sids[email] = sid

    return email_to_sids

# Load the dictionary once upon module import.
_email_to_sids = get_email_to_sids()

def email_to_sid(email, verbose=True):
    """Function that implements the conversion of email to SID. Returns -1 if email is not found."""
    if email in _email_to_sids:
        return _email_to_sids[email]
    if verbose:
        print('Warning! No SID found for student with email {}.'.format(email))
    return -1
